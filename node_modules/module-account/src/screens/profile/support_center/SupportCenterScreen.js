import React, { useLayoutEffect ,useState} from 'react';
import { SafeAreaView, View } from 'react-native';
import { useSelector } from 'react-redux';
import IconMail from '@assets/icons/icon_mail.svg';
import IconPhone from '@assets/icons/icon_phone.svg';
import IconSupport from '@assets/icons/support.svg';
import IconArrowRight from '@assets/icons/arrow-right.svg';
import BackHeader from '@components/BackHeader';
import CMText from '@components/CMText';
import Constant from '@utils/constants';
import TouchableDebounce from '@components/TouchableDebounce';
import FastImage from 'react-native-fast-image';
import CMTextInput from '@components/CMTextInput';

import {styles} from './SupportCenter.styles'


const PLACEHOLDER = {
  en: {
    userplaceholder: 'What do you want to help with?',
  },
  vn: {
    userplaceholder: 'Bạn muốn trợ giúp điều gì',
  },
};

const listItem = [
  {
    id: 1,
    icon: <IconSupport width={44} height={44} />,
    isNext: true,
    titleMenu: 'text-frequently-asked-questions',
  },
  {
    id: 2,
    icon: <IconMail width={44} height={44} />,
    isNext: false,
    titleMenu: 'text-mail',
  },
  {
    id: 3,
    icon: <IconPhone width={44} height={44} />,
    isNext: false,
    titleMenu: 'text-phone',
  },
];

const SupportCenterScreen = (props) => {
  const { navigation, keyword } = props;
  const languageLocal = useSelector((state) => state.global.language);
  const [keywordInput, setKeyWordInput] = useState('');

  const renderHeaderLeft = () => (
    <BackHeader
      handleGoBack={() => {
        navigation.goBack();
      }}
    />
  );

  const renderHeaderTitle = () => (
    <View>
      <CMText i18nKey="text-support-center" style={styles.titleScreen} />
    </View>)

  const renderHeaderRight = () => <View />
  // xử lý chuyển screen + tham số đầu vào
  const gotoSearchSupport = (keyword) => {
    navigation.navigate(Constant.FREQUENTLY_ASKED_QUESTIONS, {
      keyword: keyword,
    });}

  useLayoutEffect(() => {
    navigation.setOptions({
      headerLeft: renderHeaderLeft,
      headerRight: renderHeaderRight,
      headerTitle: renderHeaderTitle,
    });
  }, []);
   
  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <View style={styles.imgContainer} >
          <FastImage
            source={require('@assets/img/icon_background_help.png')}
            resizeMode={FastImage.resizeMode.stretch}
            style={styles.img} />
        </View>
        <CMText
          i18nKey={`text-hello-sp`}
          style={styles.title}
        />
        <CMText
          i18nKey={`text-hello-preview-sp`}
          style={styles.preview}
        />
         <CMTextInput
                placeholder={
                  languageLocal === Constant.LANGUAGE_VN
                    ? PLACEHOLDER.vn.userplaceholder
                    : PLACEHOLDER.en.userplaceholder
                }
                returnKeyType="next"
                blurOnSubmit={false}
                onChangeText={(text) => setKeyWordInput(text)} 
                onSubmitSearch={() => {
                  gotoSearchSupport(keywordInput?.trim());
                }}
                isSearch
                textInputStyle={styles.textInput}
                maxLength={200}
              />
      </View>

      <View style={styles.line} />

      <View style={styles.footer}>
        {listItem.map((item, index) => (
          <TouchableDebounce
            key={index}
            style={styles.itemMenu}
            onPress={() => {
              if (item?.id == 1) {
                navigation.navigate(Constant.FREQUENTLY_ASKED_QUESTIONS, {
                  keyword: keywordInput,
                });
              }
            }}>
            {item?.icon}
            <CMText style={styles.textMenu} i18nKey={item.titleMenu} />
            {item?.isNext && (
              <IconArrowRight style={styles.iconRight} width={18} height={18} />
            )}
          </TouchableDebounce>
        ))}
      </View>
    </SafeAreaView>

  );
};

export default SupportCenterScreen;
