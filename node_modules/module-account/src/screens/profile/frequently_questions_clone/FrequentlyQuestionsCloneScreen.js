import React, { useLayoutEffect, useState, useEffect } from 'react';
import { SafeAreaView, View, ScrollView } from 'react-native';
import { useSelector } from 'react-redux';
import Constant from '@utils/constants';
import BackHeader from '@components/BackHeader';
import CMText from '@components/CMText';
import CMTextInput from '@components/CMTextInput';
import globalStyles from '@theme/globalStyles';
import { styles } from './FrequentlyQuestionsClone.styles';
import { FlatList } from 'react-native-gesture-handler';
import TouchableDebounce from '@components/TouchableDebounce';
import Up from '@assets/icons/chevron-up.svg';
import Down from '@assets/icons/chevron-down.svg';
import { horizontal, vertical, textSize} from '@utils/scales';

const PLACEHOLDER = {
  en: {
    searchEn: 'Looking for a question?',
  },
  vn: {
    searchVn: 'Tìm kiếm câu hỏi?',
  },
};

const mockQuestions = [
  {
    id: 1,
    question: 'Ứng dụng khóa học là gì?',
    answer: 'Kết nối với hàng ngàn người dùng Tài chính để thảo luận và chia sẻ kiến thức đầu tư.',
  },
  {
    id: 2,
    question: 'Ứng dụng khóa học có những tính năng gì?',
    answer: 'Có các tính năng như video bài giảng, bài tập, kiểm tra và chứng chỉ hoàn thành.',
  },
  {
    id: 3,
    question: 'Lợi ích của việc sử dụng ứng dụng khóa học là gì?',
    answer: 'Tiết kiệm thời gian, học mọi lúc mọi nơi và theo dõi tiến độ học tập.',
  },
  {
    id: 4,
    question: 'Ứng dụng khóa học có thực sự giúp cải thiện kết quả học tập không?',
    answer: 'Có, đặc biệt là nhờ tính năng học tập cá nhân hóa và hỗ trợ trực tuyến kịp thời.',
  },
  {
    id: 5,
    question: 'Học qua ứng dụng liệu có mang lại hiệu quả cao?',
    answer: 'Có, vì người học được theo dõi tiến độ và nhận hỗ trợ từ hệ thống thông minh.',
  },
  {
    id: 6,
    question: 'Dùng app học liệu có hỗ trợ tốt cho quá trình học không?',
    answer: 'Có, các app hiện nay thường tích hợp các công nghệ giúp học tập hiệu quả hơn.',
  },
  {
    id: 7,
    question: 'Ứng dụng học trực tuyến có phải là công cụ học hiệu quả?',
    answer: 'Đúng vậy, nhờ vào các tính năng tương tác và hệ thống luyện tập cá nhân hóa.',
  },
  {
    id: 8,
    question: 'Liệu học bằng ứng dụng có cải thiện được khả năng tự học?',
    answer: 'Có, vì ứng dụng cung cấp lộ trình học rõ ràng và hỗ trợ học chủ động.',
  },
  {
    id: 9,
    question: 'Các ứng dụng học tập có phù hợp với nhu cầu học cá nhân không?',
    answer: 'Có, nhờ khả năng tùy chỉnh nội dung học phù hợp với từng người học.',
  },
  {
    id: 10,
    question: 'Sử dụng app học có phải là cách học hiệu quả trong thời đại số?',
    answer: 'Chắc chắn, vì nó kết hợp công nghệ với nội dung học linh hoạt và cá nhân hóa.',
  }
  
];

const FrequentlyQuestionCloneScreen = (props) => {
  const { navigation, route } = props;
  const languageLocal = useSelector((state) => state.global.language);
  const [expandedId, setExpandedId] = useState(null);
  const [searchText, setSearchText] = useState(route.params?.keyword || '');
  const [filteredQuestions, setFilteredQuestions] = useState(mockQuestions);

  const filterQuestions = (text) => {
    if (!text) {
      setFilteredQuestions(mockQuestions);
      return;
    }
    const filtered = mockQuestions.filter(
      (item) =>
        item.question.toLowerCase().includes(text.toLowerCase()) ||
        item.answer.toLowerCase().includes(text.toLowerCase())
    );
    setFilteredQuestions(filtered);
  };

  const handleSearch = (text) => {
    setSearchText(text);
    filterQuestions(text);
  };

  useEffect(() => {
    if (route.params?.keyword) {
      setSearchText(route.params.keyword);
      filterQuestions(route.params.keyword);
    }
  }, [route.params?.keyword]);

  const toggleExpand = (id) => {
    setExpandedId(prev => (prev === id ? null : id));
  };

  const renderHeaderLeft = () => (
    <BackHeader
      handleGoBack={() => {
        navigation.goBack();
      }}
    />
  );

  const renderHeaderRight = () => <View />;

  const renderHeaderTitle = () => (
    <View>

    
    <CMText
      i18nKey="text-support-question-center"
      style={styles.titleScreen}
    />
    </View>
  );

  useLayoutEffect(() => {
    navigation.setOptions({
      headerLeft: renderHeaderLeft,
      headerRight: renderHeaderRight,
      headerTitle: renderHeaderTitle,
    });
  }, []);

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.content}>
        <CMTextInput
          placeholder={
            languageLocal === Constant.LANGUAGE_VN
              ? PLACEHOLDER.vn.searchVn
              : PLACEHOLDER.en.searchEn
          }
          returnKeyType="next"
          blurOnSubmit={false}
          value={searchText}
          onChangeText={handleSearch}
          isSearch
          textInputStyle={styles.textInput}
          maxLength={200}
        />
        <View style={styles.lstQuestion}>
          <FlatList
            data={filteredQuestions}
            keyExtractor={(item) => item.id.toString()}
            showsVerticalScrollIndicator={false}
            extraData={[filteredQuestions, expandedId]}
            renderItem={({ item }) => {
              const isExpanded = expandedId === item.id;
              return (
                <View style={styles.itemContainer}>
                  <TouchableDebounce onPress={() => toggleExpand(item.id)} style={styles.questionContainer}>
                    <View style={styles.questionRow}>
                      <CMText title={item?.question} style={styles.questionText} />
                      {isExpanded ? <Up /> : <Down />}
                    </View>
                  </TouchableDebounce>

                  {isExpanded && (
                    <CMText title={item?.answer} style={styles.answerText} />
                  )}
                </View>
              );
            }}
          />
        </View>
      </View>
    </SafeAreaView>
  );
};

export default FrequentlyQuestionCloneScreen;
